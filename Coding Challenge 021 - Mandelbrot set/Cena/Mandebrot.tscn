[gd_scene load_steps=2 format=3 uid="uid://cagkxq0f54nvc"]

[sub_resource type="GDScript" id="GDScript_pxpap"]
script/source = "class_name MANDEBROT
extends Node2D

@onready var camera_2d = $Camera2D

var posicoes:Array = []
var valor_maximo:float = 1.5
var valor_minimo:float = -1.5
var tamanhoTela:Vector2i

var tempo:float = 0.0
var populacao:float = 0.8
var crescimento:float = 2.6

var poligono:Polygon2D
var linha:Line2D

func _ready():
	tamanhoTela = Vector2i(1000,1000)
	alterar_tamanho_de_tela(tamanhoTela)
	iniciar_poligono()
	iniciar_linha()
	# Exemplo de uso da função
	var Zn = 0.5  # População inicial
	var generations = 1000  # Número de gerações
	var last_values = 100  # Número de últimos valores para calcular o valor de equilíbrio

	var Rs = range(0, 4, 1)  # Taxas de crescimento
	var equilibriums = []  # Valores de equilíbrio

	for R in Rs:
		var population = mapa_de_logistica(R, Zn, generations)
		var equilibrium = valor_de_equilibrio(population, last_values)
		equilibriums.append(equilibrium)
	
	print(Rs)
	print(equilibriums)
	
	


func alterar_tamanho_de_tela(tamanho:Vector2i) -> void:
	get_viewport().size = tamanho

func iniciar_poligono() -> void:
	poligono = Polygon2D.new()
	add_child(poligono)

func iniciar_linha() -> void:
	linha = Line2D.new()
	linha.width = 1
	for x in range(tamanhoTela.x/2):
		linha.add_point(Vector2(x,0))
	add_child(linha)

func verificador_de_mandebrot(Zn:float, C:float, n:int = 0):
	var mz = Zn * Zn + C
	var mn = n
	var eh_mandebrot:bool
	if mz > 16:
		eh_mandebrot = false
		return eh_mandebrot
	else:
		mn += 1
		if mn < 100:
			eh_mandebrot = verificador_de_mandebrot(mz+1, C, mn)
			return eh_mandebrot
		else:
			eh_mandebrot = true
			return eh_mandebrot

func mapa_de_logistica(indice_de_crescimento:float, populacao_inicial:float, geracoes:int) -> Array:
	var array_de_populacoes:Array = [populacao_inicial]
	for i in range(geracoes):
		populacao_inicial = indice_de_crescimento * populacao_inicial * (1 - populacao_inicial)
		array_de_populacoes.append(populacao_inicial)
	return array_de_populacoes

func valor_de_equilibrio(array_de_populacoes:Array, ultimos_valores:int) -> float:
	var soma:float = 0.0
	for i in range(ultimos_valores):
		soma += array_de_populacoes[array_de_populacoes.size() - 1 - i]
	return soma/ultimos_valores

func _process(delta):
	var Rs:Array = range(0, int(tamanhoTela.x/2), 1)
	var equilibriums:Array
	for x in range(tamanhoTela.x/2):
		var population = mapa_de_logistica(crescimento, populacao, int(tamanhoTela.x/2))
		var equilibrium = valor_de_equilibrio(population, int(tamanhoTela.x/2))
		equilibriums.append(equilibrium)
		linha.set_point_position(x, Vector2(equilibriums[x],Rs[x]))

func _input(event):
	if Input.is_mouse_button_pressed(MOUSE_BUTTON_WHEEL_DOWN):
		camera_2d.zoom += Vector2(1,1)
		camera_2d.position = get_global_mouse_position()/2
	elif Input.is_mouse_button_pressed(MOUSE_BUTTON_WHEEL_UP):
		camera_2d.zoom -= Vector2(1,1)
		camera_2d.position = get_global_mouse_position()/2
		if camera_2d.zoom < Vector2(0.2,0.2):
			camera_2d.zoom = Vector2(0.1,0.1)
	elif Input.is_action_pressed(\"ui_down\"):
		camera_2d.position.y += 100
		print(camera_2d.position)
	elif Input.is_action_pressed('ui_up'):
		camera_2d.position.y -= 100
		print(camera_2d.position)
	elif Input.is_action_pressed('ui_left'):
		camera_2d.position.x -= 100
		print(camera_2d.position)
	elif Input.is_action_pressed('ui_right'):
		camera_2d.position.x += 100
		print(camera_2d.position)
	elif Input.is_action_just_pressed(\"ui_accept\"):
		get_tree().reload_current_scene()
	elif Input.is_action_just_pressed('w'):
		populacao += 0.4
	elif Input.is_action_just_pressed(\"s\"):
		populacao -= 0.4
	elif Input.is_action_just_pressed(\"a\"):
		crescimento -= 0.1
	elif Input.is_action_just_pressed(\"d\"):
		crescimento += 0.1

func desenhar_poligono() -> void:
	poligono.polygon = posicoes
	print(posicoes.size())

"

[node name="Mandebrot" type="Node2D"]
script = SubResource("GDScript_pxpap")

[node name="Camera2D" type="Camera2D" parent="."]
